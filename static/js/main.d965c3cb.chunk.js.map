{"version":3,"sources":["Component/redux/actionCreator.js","Component/Word.js","Component/Form.js","Component/Filter.js","Component/List.js","Component/redux/reducer.js","Component/redux/word.reducer.js","Component/redux/shouldShowFrom.reducer.js","Component/redux/filterMode.reducer.js","Component/redux/store.js","App.js","serviceWorker.js","index.js"],"names":["URL","toggleForm","type","setFilterMode","filterMode","addWord","word","getAllWords","dispatch","axios","get","then","response","words","data","removeWord","_id","delete","toggleWord","isMemorized","put","Word","_this","this","props","react_default","a","createElement","className","en","vn","onClick","Component","connect","actionCreator","Form","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","txtEn","txtVn","_this2","_this$state","post","res","success","alert","setState","_this3","_this$state2","shouldShowForm","placeholder","value","onChange","evt","target","style","width","margin","Filter","List","Component_Form","Component_Filter","FilterWord","map","w","Component_Word","key","filter","actionCreators","reducer","combineReducers","arguments","length","undefined","action","concat","objectSpread","store","createStore","applyMiddleware","thunk","App","es","Component_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d965c3cb.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst URL = 'https://server2912.herokuapp.com/word/'\r\n\r\nexport function toggleForm(){\r\n    return {type : 'TOGGLE_FORM'}\r\n}\r\n\r\nexport function setFilterMode(filterMode){\r\n    return {type : 'SET_FILTER_MODE', filterMode}\r\n}\r\n\r\n// export function removeWord(_id){\r\n//     return {type: 'REMOVE_WORD', _id}\r\n// }\r\n\r\nexport function addWord(word){\r\n    return {type: 'ADD_WORD', word}\r\n}\r\n\r\n// export function toggleWord(_id){\r\n//     return {type: 'TOGGLE_WORD', _id}\r\n// }\r\n\r\nexport function getAllWords(){\r\n    return function(dispatch){\r\n        //const URL = 'http://localhost:4000/word';\r\n        axios.get(URL)\r\n        .then(response => dispatch({type: 'SET_WORDS', words : response.data.words}))\r\n    }\r\n}\r\n\r\nexport function removeWord(_id){\r\n    return function(dispatch){\r\n        //const URL = 'http://localhost:4000/word/' + _id;\r\n        axios.delete(URL + _id)\r\n        .then(response => dispatch({type: 'REMOVE_WORD', _id}))\r\n    }\r\n}\r\n\r\nexport function toggleWord(_id, isMemorized){\r\n    return function(dispatch){\r\n        //const URL = 'http://localhost:4000/word/' + _id;\r\n        axios.put(URL + _id,{isMemorized})\r\n        .then(() => dispatch({type: 'TOGGLE_WORD', _id}))\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actionCreator from './redux/actionCreator'\r\n\r\nclass Word extends Component {\r\n    // toggleWord(_id, isMemorized){\r\n    //     const URL = 'http://localhost:4000/word/' + _id;\r\n    //     axios.put(URL, {isMemorized})\r\n    //     .then(response => this.props.toggleWord(_id))\r\n    // }\r\n    // removeWord(_id){\r\n    //     const URL = 'http://localhost:4000/word/' + _id;\r\n    //     axios.delete(URL)\r\n    //     .then(response => this.props.removeWord(_id))\r\n    // }\r\n    render() {\r\n        const { word } = this.props;\r\n        return (\r\n            <div className=\"word\" >\r\n                <div className=\"word-container\">\r\n                    <h3 className=\"text-success\">{word.en}</h3>\r\n                    <h3 className=\"text-danger\">\r\n                        {word.isMemorized ? '----' : word.vn}\r\n                    </h3>\r\n                </div>\r\n                <div className=\"btn-container\">\r\n                    <button\r\n                        className={word.isMemorized ? 'btn btn-danger' : 'btn btn-success'}\r\n                        onClick={() => this.props.toggleWord(word._id, !word.isMemorized)}\r\n                        >\r\n                        {word.isMemorized ? 'Forgot' : 'Memoried'}\r\n                    </button>\r\n\r\n                    <button\r\n                        className=\"btn btn-warning\"\r\n                        onClick={() => this.props.removeWord(word._id)}>\r\n                        Remove\r\n        </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default connect(null,actionCreator)(Word);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreator from './redux/actionCreator'\r\nimport axios from \"axios\";\r\n\r\nclass Form extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            txtEn : '',\r\n            txtVn : ''\r\n        }\r\n\r\n    }\r\n    addWord(){\r\n        const {txtEn, txtVn} = this.state;\r\n        const URL = 'http://server2912.herokuapp.com/word/';\r\n        axios.post(URL,{en: txtEn, vn: txtVn})\r\n        .then(res => {\r\n            const {success} = res.data;\r\n            if (!success) return alert(\"Can not add word\");\r\n            this.props.addWord(res.data.word)\r\n        })\r\n        this.setState({txtEn: '', txtVn: ''})\r\n    }\r\n    toggleForm(){\r\n        \r\n    }\r\n    render() {\r\n        const {txtEn, txtVn} = this.state;\r\n        if(!this.props.shouldShowForm) return (\r\n            <button\r\n                className='btn btn-success' style={{width: 200, margin: 10}}\r\n                onClick={() => this.props.toggleForm()}>\r\n                +\r\n            </button>\r\n        )\r\n        return (\r\n            <div className=\"form-group word-from\" >\r\n                <input\r\n                    placeholder=\"English\"\r\n                    className=\"form-control\"\r\n                    value={txtEn}\r\n                    onChange={evt => this.setState({txtEn : evt.target.value})}/>\r\n                <br />\r\n                <input\r\n                    placeholder=\"Vietnamese\"\r\n                    className=\"form-control\"\r\n                    value={txtVn}\r\n                    onChange={evt => this.setState({txtVn : evt.target.value})}/>\r\n                <br />\r\n                <div className=\"btn-container\">\r\n                    <button \r\n                        className=\"btn btn-success\"\r\n                        onClick={()=>this.addWord()}>\r\n                        Add word\r\n                    </button>\r\n                    <button\r\n                        className=\"btn btn-danger\"\r\n                        onClick={() => this.props.toggleForm()}>\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapstate = state => ({ shouldShowForm: state.shouldShowForm });\r\nexport default connect(mapstate, actionCreator)(Form);","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux';\r\nimport * as actionCreator from './redux/actionCreator'\r\n\r\nclass Filter extends Component {\r\n    render() {\r\n        const { filterMode} = this.props;\r\n        return (\r\n            <select\r\n                className=\"word\"\r\n                value={filterMode}\r\n                onChange={evt => this.props.setFilterMode(evt.target.value)}>\r\n                <option value=\"Show_All\">Show All</option>\r\n                <option value=\"Show_Memoried\">Show Memoried</option>\r\n                <option value=\"Show_Forgot\">Show Forgot</option>\r\n            </select>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapstate = state => ({filterMode : state.filterMode});\r\nexport default connect(mapstate, actionCreator)(Filter);","import React, { Component } from 'react'\r\nimport Word from './Word.js';\r\nimport Form from './Form.js';\r\nimport Filter from './Filter.js';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from './redux/actionCreator'\r\n\r\nclass List extends Component {\r\n\r\n  componentWillMount() {\r\n    this.props.getAllWords()\r\n  }\r\n\r\n  get FilterWord() {\r\n    return (\r\n      this.props.words.filter(w => {\r\n        if (this.props.filterMode === 'Show_Memoried' && !w.isMemorized) return false;\r\n        if (this.props.filterMode === 'Show_Forgot' && w.isMemorized) return false;\r\n        return true;\r\n      }));\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form />\r\n        <br />\r\n        <Filter />\r\n        {this.FilterWord.map(w =>\r\n          <Word\r\n            word={w}\r\n            key={w._id} />)}\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nconst mapstate = state => ({ words: state.words, filterMode: state.filterMode });\r\n\r\nexport default connect(mapstate, actionCreators)(List);\r\n","import {  combineReducers } from 'redux';\r\nimport {filterModeReducer} from './filterMode.reducer'\r\nimport {wordReducer} from './word.reducer'\r\nimport {shouldShowFormReducer} from './shouldShowFrom.reducer'\r\n\r\n\r\nexport const reducer = combineReducers({\r\n    words: wordReducer,\r\n    shouldShowForm: shouldShowFormReducer,\r\n    filterMode: filterModeReducer\r\n})","// const words = [\r\n//     { id: 'a1', en: \"One\", vn: \"Mot\", isMemorized: true },\r\n//     { id: 'a2', en: \"Two\", vn: \"Hai\", isMemorized: false },\r\n//     { id: 'a3', en: \"Three\", vn: \"Ba\", isMemorized: false },\r\n//     { id: 'a4', en: \"Four\", vn: \"Bon\", isMemorized: true },\r\n// ]\r\n\r\nexport function wordReducer(state = [], action) {\r\n    if (action.type === 'SET_WORDS') return state.concat(action.words);\r\n    if (action.type === 'REMOVE_WORD') {\r\n        const words = state.filter(w => w._id !== action._id)\r\n        return words;\r\n    }\r\n    if (action.type === 'ADD_WORD') {\r\n        const words = state.concat(action.word);\r\n        return words;\r\n    }\r\n    if (action.type === 'TOGGLE_WORD') {\r\n        const words = state.map(w => {\r\n            if (action._id === w._id) return { ...w, isMemorized: !w.isMemorized }\r\n            return w;\r\n        })\r\n        return words;\r\n    }\r\n    return state;\r\n}","export function shouldShowFormReducer(state = false, action) {\r\n    if (action.type === 'TOGGLE_FORM') return !state;\r\n    if (action.type === 'ADD_WORD') return false;\r\n    return state;\r\n}\r\n","\r\nexport function filterModeReducer(state = false, action) {\r\n    if (action.type === 'SET_FILTER_MODE') return action.filterMode\r\n    return state;\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport {reducer} from './reducer'\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const store = createStore(reducer, applyMiddleware(thunk));","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport List from './Component/List';\nimport { Provider } from 'react-redux';\nimport {store} from './Component/redux/store'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <List />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}